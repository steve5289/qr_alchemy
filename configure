#!/usr/bin/bash

MAKEFILE_SRC=./Makefile.in
MAKEFILE=./Makefile
VERSION=0.2.0
RELEASE=0

export PATH="$PATH:/usr/sbin"
export PATH="$PATH:/sbin"

function check_dependancies {
    echo '## Checking Dependancies'
    check_cmd zbarimg
    check_cmd qrencode
    check_cmd python3
    check_cmd iwgetid
    check_cmd zenity
    check_cmd xdg-open
    check_cmd xdg-mime

    check_python_lib os
    check_python_lib gi
    check_python_lib sys
    check_python_lib subprocess
    check_python_lib configparser
    check_python_lib test

    check_paths "askpass" \
        /usr/lib/openssh/gnome-ssh-askpass \
        /usr/libexec/openssh/ssh-askpass \
        /usr/lib/ssh/x11-ssh-askpass \
        /usr/bin/lxqt-openssh-askpass
        
    echo 'All Dependancies check out!'
    echo
    echo
}

function check_cmd {
    local CMD="$1"

    echo -n "checking $CMD..."
    command -v $CMD > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        die "$CMD not found.\n This is required for this install"
    fi
    echo 'ok'
}

function check_paths {
    NAME="$1"
    shift
    FILES=( "$@" )
    for FILE in "${FILES[@]}"; do
        echo -n "Checking for $FILE..."
        if [[ -f "$FILE" ]]; then
            echo "ok"
            return 0
        else
            echo "not ok"
        fi
    done
    die "Could not find a '$NAME' on the system"
}

function check_python_lib {
    local LIB="$1"

    echo -n "checking python($LIB)..."
    python3 -c "import $LIB"
    if [[ $? -ne 0 ]]; then
        die "python3($LIB) not found... This is required for this install"
    fi
    echo 'ok'
}

function generate_makefile {
    echo -n 'Generating Makefile...'
    set -e

    cp -f "$MAKEFILE_SRC" "$MAKEFILE"

    # Python lib
    if [[ -z "$PYTHON_LIBDIR" ]]; then
        BASE_PYTHON_VERSION=$(python3 --version | awk '{print $2}' | awk -F. '{print $1 "." $2}')
    	if [[ -z "$BASE_PYTHON_VERSION" ]]; then
   	    die "Could not determine base python version"
   	fi
        if [[ -d "/lib/python$BASE_PYTHON_VERSION/site-packages/" ]]; then
            PYTHON_LIBDIR="/lib/python$BASE_PYTHON_VERSION/site-packages/"
        elif [[ -d "/lib/python$BASE_PYTHON_VERSION" ]]; then
            PYTHON_LIBDIR="/lib/python$BASE_PYTHON_VERSION"
        fi
    fi

    sed -i "s|%%PYTHON_LIBDIR%%|$PYTHON_LIBDIR|g" "$MAKEFILE"

    # bin directory
    if [[ -z "$BINDIR" ]]; then
        BINDIR="/usr/local/bin"
    fi
    sed -i "s|%%BINDIR%%|$BINDIR|g" "$MAKEFILE"

    # home directory
    sed -i "s|%%HOME%%|$HOME|g" "$MAKEFILE"

    # config directory
    if [[ -z "$CONFDIR" ]]; then
        CONFDIR="/etc"
    fi
    sed -i "s|%%CONFDIR%%|$CONFDIR|g" "$MAKEFILE"

    # share directory
    if [[ -z "$SHAREDIR" ]]; then
        SHAREDIR="/usr/local/share/qralchemy"
    fi
    sed -i "s|%%SHAREDIR%%|$SHAREDIR|g" "$MAKEFILE"
    
    # application directory
    if [[ -z "$APPDIR" ]]; then
        APPDIR="/usr/local/share/applications/"
    fi
    sed -i "s|%%APPDIR%%|$APPDIR|g" "$MAKEFILE"
    
    # user application directory
    if [[ -z "$USER_APPDIR" ]]; then
        USER_APPDIR="$HOME/.local/share/applications/"
    fi
    sed -i "s|%%USER_APPDIR%%|$USER_APPDIR|g" "$MAKEFILE"
    
    # pixmaps directory
    if [[ -z "$PIXMAPDIR" ]]; then
        PIXMAPDIR="/usr/share/pixmaps/"
    fi
    sed -i "s|%%PIXMAPDIR%%|$PIXMAPDIR|g" "$MAKEFILE"
    
    # standalone directory
    STANDALONEDIR=$(pwd)
    sed -i "s|%%STANDALONEDIR%%|$STANDALONEDIR|g" "$MAKEFILE"

    sed -i "s|%%VERSION%%|$VERSION|g" "$MAKEFILE"
    sed -i "s|%%RELEASE%%|$RELEASE|g" "$MAKEFILE"
    set +e
    echo 'Done.'
}

function die {
    echo -e "$@"
    exit 1

}

function main {
    check_dependancies
    generate_makefile
    echo 'configure complete! run `make` to build'
}
main "$@"
